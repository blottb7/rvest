#libraries
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)

#read in events list
all_events_list <- readRDS("C:/Users/Ben/Desktop/R Projects/olympics/all_events_2018.rds")

#global vars
hilo_cols <- 2

#Function for scrapign nicerodds website
nicerodds_scraper <- function(url, hilo_cols = 2) {
  
  #read in and save url
  webpage <- read_html(url)
  
  #read in event
  event <- html_nodes(webpage, '.subItemSelected')
  event <- html_text(event)
  
  #headers
  event_headers <- html_nodes(webpage, 'th')  #read in 'headers' node
  event_headers <- html_text(event_headers)  #extract
  event_headers <- data.frame(matrix(unlist(event_headers), nrow = 1), stringsAsFactors = FALSE)  #convert to df
  
  names(event_headers) <- event_headers[1,]  #set row 1 as column names
  colnames(event_headers)[1] <- "name"  #rename first column to team/athlete name
  columns <- ncol(event_headers)  #save number of columns
  
  #names
  event_names <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView1 td:nth-child(1)')
  event_names <- html_text(event_names)
  event_names <- as.data.frame(event_names)
  
  event_names[,1] <- gsub("\\(.*","", event_names[,1])  #remove country abbreviations and parenthesis from name col
  event_names[,1] <- sub("\\s+$", "", event_names[,1])  #remove trailing white space
  
  #odds hi lo
  event_hilo <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView1 td+ td')
  event_hilo <- html_text(event_hilo)
  event_hilo <- data.frame(matrix(as.numeric(unlist(event_hilo)), ncol = hilo_cols, byrow = TRUE))
  
  #odds sites
  event_odds <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView2 td')
  event_odds <- html_text(event_odds)
  event_odds <- data.frame(matrix(as.numeric(unlist(event_odds)), ncol = columns - 3, byrow = TRUE))
  
  #bind columns
  event_df <- event_names %>%
    bind_cols(event_hilo) %>%
    bind_cols(event_odds) %>%
    head(-1)
  
  #will need to do something with duplicate names similar to what I did with baseball
  
  #name cols
  names(event_df) <- names(event_headers)  #convert to headers df names
  
  #add event col
  event_df$event <- event
  
  #add ifelse() for event that there are no odds posted
  
  #return event df
  event_df
}

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-mens-slalom',
                  'http://www.nicerodds.co.uk/olympics-mens-giant-slalom',
                  'http://www.nicerodds.co.uk/olympics-mens-downhill',
                  'http://www.nicerodds.co.uk/olympics-mens-combined',
                  'http://www.nicerodds.co.uk/olympics-mens-super-g',
                  'http://www.nicerodds.co.uk/olympics-alpine-team-event',
                  'http://www.nicerodds.co.uk/olympics-womens-slalom',
                  'http://www.nicerodds.co.uk/olympics-womens-giant-slalom',
                  'http://www.nicerodds.co.uk/olympics-womens-downhill',
                  'http://www.nicerodds.co.uk/olympics-womens-combined',
                  'http://www.nicerodds.co.uk/olympics-womens-super-g')
)

alpine <- lapply(urls, nicerodds_scraper)
alpine <- do.call(bind_rows, alpine)
alpine$sport <- "alpine"

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-biathlon-men-10-km-sprint',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-12-5-km-pursuit',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-15-km-mass-start',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-20-km-individual',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-relay',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-7-5-km-sprint',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-10-km-pursuit',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-12-5-km-mass-start',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-15-km-individual',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-relay',
                  'http://www.nicerodds.co.uk/olympics-biathlon-mixed-relay')
)

biathlon <- lapply(urls, nicerodds_scraper)
biathlon <- do.call(bind_rows, biathlon)
biathlon$sport <- "biathlon"

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-cross-country-mens-15-km-freestyle',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-skiathlon',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-50-km',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-4x10-mix-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-sprint-classic',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-sprint-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-10-km-freestyle',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-skiathlon',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-30-km-classical',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-4x5-mix-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-sprint-relay-skate',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-sprint-classic')
)

cross_country <- lapply(urls, nicerodds_scraper)
cross_country <- do.call(bind_rows, cross_country)
cross_country$sport <- "cross_country"

#hockey
urls <- as.list(c('http://www.nicerodds.co.uk/olympics-ice-hockey-men'),
                'http://www.nicerodds.co.uk/olympics-ice-hockey-women')

hockey <- lapply(urls, nicerodds_scraper)
hockey <- do.call(bind_rows, hockey)
hockey$sport <- "hockey"

#ski jumping
# urls <- as.list(c('http://www.nicerodds.co.uk/olympics-ski-jumping-mens-normal-hill'),
#                 'http://www.nicerodds.co.uk/olympics-ski-jumping-mens-large-hill',
#                 'http://www.nicerodds.co.uk/olympics-ski-jumping-mens-large-hill-team',
#                 'http://www.nicerodds.co.uk/olympics-ski-jumping-womens-normal-hill')
# 
# ski_jumping <- lapply(urls, nicerodds_scraper)
# ski_jumping <- do.call(bind_rows, ski_jumping)
# ski_jumping$sport <- "ski_jumping"

all_events <- alpine %>%
  bind_rows(biathlon) %>%
  bind_rows(cross_country) %>%
  bind_rows(hockey) #%>%
  #bind_rows(ski_jumping)

#Paf and Unibet and the same, so get rid of Paf
all_events$Unibet <- NULL
all_events$Expekt <- NULL #same for betclic and expekt

#remove "Any Other" from $name
all_events <- all_events %>%
  filter(!grepl("Any Other", name))
all_events <- all_events %>%
  filter(!grepl("Odds Coming Soon", name))

#convert all "Oar" and "Russia" name variations to something the same
all_events$name <- gsub(".*Oar.*", "Russia", all_events$name)
all_events$name <- gsub(".*Russia.*", "Russia", all_events$name)
#group by sport event and name, and calc mean odds for each individual
# copy <- all_events %>%
#   group_by(sport, event, name) %>%
#   summarize(mean_odds = mean(c(Betclic, Paf, Williamhill, Betway, Bet365, Bwin, Titanbet, Winner), na.rm = TRUE))

#to do:
#1) combine by same name in same event
#2) get rid of non-American symbols

# all_events_odds <- all_events %>%
#   select(-name, -Highestodds, -Lowestodds, -event, -sport)
# 
# all_events_odds$mean_odds <- rowMeans(all_events_odds, na.rm = TRUE)
# 
# all_events_odds <- all_events_odds %>%
#   select(mean_odds)
# all_events <- bind_cols(all_events, all_events_odds)
# rm(all_events_odds)

#group by sport event and name, and calc mean odds for each individual
all_events1 <- all_events %>%
  group_by(sport, event, name) %>%
  summarize(mean_odds = mean(c(Betclic, Paf, Williamhill, Betway, Bet365, Bwin, Titanbet, Winner), na.rm = TRUE)) %>%
  mutate(implied_odds = 1 / mean_odds)
  
# all_events1 <- all_events %>%
#   select(name, sport, event, mean_odds) %>%
#   filter(!is.na(mean_odds)) %>%
#   mutate(implied_odds = 1 / mean_odds)
#
all_events2 <- all_events1 %>%
  group_by(sport, event) %>%
  summarize(event_odds_tot = sum(implied_odds))
all_events1 <- all_events1 %>%
  left_join(all_events2, by = c("sport", "event")) %>%
  mutate(true_odds = implied_odds / event_odds_tot)
# #checks to make sure true odds add to 1 for each event
all_events_new <- all_events1 %>%
  group_by(sport, event) %>%
  summarize(event_true_odds_tot = sum(true_odds))

#remove unneeded df's
rm(alpine, biathlon, cross_country, hockey, ski_jumping)
rm(all_events_new)
#rm(all_events2)
#
all_events1$mean_odds <- NULL  #remove mean odds

#make sport-event var (this could be done earlier)
all_events1$sport_event <- paste(all_events1$sport, all_events1$event, sep = " ")

#find odds of second place
#####
odds_second <- function(x) {
  
  List <- list()
  for(i in 1:length(x)) {
    
    new_odds <- -1 * (x[i] / (1 - x[i])) * x[i]
    
    for(j in 1:length(x)) {
      
      new_odds <- new_odds + (x[i] / (1 - x[j])) * x[j]
    }
    List[[i]] <- new_odds
    #print(new_odds)
    #print(List[[i]])
    #return(new_odds[i])
  }
  Matrix <- t(do.call(cbind, List))
  #print(Matrix)
}

#create event_list counter for each sport-event pair
event_list <- unique(all_events1$sport_event)

#create for loop that runs odds_second on each sport-event group
empty_df <- data.frame() #create empty data frame

for(i in seq_along(event_list)) {
  #run odds second on each sport event group
  new_df <- as.data.frame(odds_second(all_events1$true_odds[which(all_events1$sport_event == event_list[i])]))
  #print(new_df)
  #bind the rows of each iteration into a df object
  empty_df <- bind_rows(empty_df, new_df)
  
}

#bind second place odds into dataframe
all_events1 <- bind_cols(all_events1, empty_df)
colnames(all_events1)[8] <- "true_odds_second"

#read in bovada info
library(readxl)  #libraries
bv <- read_excel("C:/Users/Ben/Desktop/R Projects/olympics/olympics_odds_2018.xlsx")  #read in data

#equation for implied odds from money line odds
bv$implied_odds <- ifelse(bv$line_odds < 0,
                          -bv$line_odds / (-bv$line_odds + 100),
                          100 / (bv$line_odds + 100) )

#get implied odds total for each sport event group
bv1 <- bv %>%
  group_by(sport, event) %>%
  summarize(event_odds_tot = sum(implied_odds))
#join event odds total with rest of df and calculate true odds
bv <- bv %>%
  left_join(bv1, by = c("sport", "event")) %>%
  mutate(true_odds = implied_odds / event_odds_tot)
# #checks to make sure true odds add to 1 for each event
# bv_new <- bv %>%
#   group_by(sport, event) %>%
#   summarize(event_true_odds_tot = sum(true_odds))
# rm(bv_new)

#remove line odds
bv$line_odds <- NULL

#make sport-event var (this could be done earlier)
bv$sport_event <- paste(bv$sport, bv$event, sep = " ")

#create event_list counter for each sport-event pair
event_list <- unique(bv$sport_event)

#create for loop that runs odds_second on each sport-event group
empty_df <- data.frame() #create empty data frame

for(i in seq_along(event_list)) {
  #run odds second on each sport event group
  new_df <- as.data.frame(odds_second(bv$true_odds[which(bv$sport_event == event_list[i])]))
  #print(new_df)
  #bind the rows of each iteration into a df object
  empty_df <- bind_rows(empty_df, new_df)
  
}

#bind second place odds into dataframe
bv <- bind_cols(bv, empty_df)
colnames(bv)[8] <- "true_odds_second"

#combine
df <- bind_rows(all_events1, bv)

#Create fantasy points!
df$points <- 5 * df$true_odds + 3 * df$true_odds_second

#start looking for "duplicate" athletes
# df1 <- df %>%
#   arrange(name)
# df2 <- df %>%
#   arrange(desc(points))

#remove out columns that are no longer needed
df <- df %>% select(sport, event, name, sport_event, true_odds, true_odds_second, points)
#get rid of foreign chars in athlete names
# a function to replace foreign characters
replaceforeignchars <- function(x)
{
  require(gsubfn);
  x <- gsub("š","s",x)
  x <- gsub("œ","oe",x)
  x <- gsub("ž","z",x)
  x <- gsub("ß","ss",x)
  x <- gsub("þ","y",x)
  x <- gsub("à","a",x)
  x <- gsub("á","a",x)
  x <- gsub("â","a",x)
  x <- gsub("ã","a",x)
  x <- gsub("ä","a",x)
  x <- gsub("å","a",x)
  x <- gsub("æ","ae",x)
  x <- gsub("ç","c",x)
  x <- gsub("è","e",x)
  x <- gsub("é","e",x)
  x <- gsub("ê","e",x)
  x <- gsub("ë","e",x)
  x <- gsub("ì","i",x)
  x <- gsub("í","i",x)
  x <- gsub("î","i",x)
  x <- gsub("ï","i",x)
  x <- gsub("ð","d",x)
  x <- gsub("ñ","n",x)
  x <- gsub("ò","o",x)
  x <- gsub("ó","o",x)
  x <- gsub("ô","o",x)
  x <- gsub("õ","o",x)
  x <- gsub("ö","o",x)
  x <- gsub("ø","oe",x)
  x <- gsub("ù","u",x)
  x <- gsub("ú","u",x)
  x <- gsub("û","u",x)
  x <- gsub("ü","u",x)
  x <- gsub("ý","y",x)
  x <- gsub("ÿ","y",x)
  x <- gsub("ğ","g",x)
  
  return(x)
}

df$name <- replaceforeignchars(df$name)
#separate out team events
teams <- df %>%
  filter(sport == "curling" | sport == "hockey")
ind <- df %>%
  anti_join(teams)

# event_list <- unique(ind$sport_event)

#Create list of relay/small team events
relay_list <- as.list(c("short_track 5000m_men_relay", "cross_country Men's 4x10 mix relay", "biathlon Women's relay",
                "cross_country Women's sprint relay", "biathlon Men's relay", "ski_jumping large_hill_men_team",
                "nordic_combined large_hill_team", "cross_country Women's 4x5 mix relay", "speed_skating team_pursuit_men",
                "biathlon Mixed relay", "luge team_relay", "short_track 3000m_women_relay", "speed_skating team_pursuit_women",
                "cross_country Men's sprint relay "))

relays <- ind[ind$sport_event %in% relay_list, ]  #subset by sport-events in relay_list
relays <- relays %>% arrange(sport_event, desc(points))

ind <- ind %>%
  arrange(sport_event, desc(points))

#hard to tell who is in the mixed biathlon relay, so conservatively leaving them out
#read in and assing points to relay participants
relay_inds <- read_excel("C:/Users/Ben/Desktop/R Projects/olympics/olympics_odds_2018.xlsx", sheet = 3)  #read in data
#change name to country for relays
names(relays)[3] <- "country"
#trim white space from sport-event in relays
relays$sport_event <- str_trim(relays$sport_event)

relays$country <- gsub("\\.", "", relays$country)  #remove periods in countries in relays
relays$country <- gsub("women", "", relays$country)  #remove "women" from country names
relays$country <- gsub("Women", "", relays$country)
relays$country <- str_trim(relays$country)  #remove trailing white space
relays$country <- sub("Usa", "USA", relays$country)

relay_inds1 <- relay_inds %>%
  left_join(relays, by = c("sport_event", "country"))
relay_inds2 <- relay_inds1 %>%
  select(-country) #%>%
  #select(sport, event, name, sport_event, true_odds, true_odds_second, points)

#join relay participants with other individuals
#ind1 <- merge(ind, relay_inds2)
ind1 <- ind %>%
  full_join(relay_inds2)

ind2 <- ind1 %>%
  group_by(name) %>%
  summarize(total_points = sum(points)) %>%
  arrange(desc(total_points))
  
