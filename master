library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
#library(selectr)

#global vars
hilo_cols <- 2

#Function for scrapign nicerodds website
nicerodds_scraper <- function(url, hilo_cols = 2) {
  
  #read in and save url
  webpage <- read_html(url)
  
  #read in event
  event <- html_nodes(webpage, '.subItemSelected')
  event <- html_text(event)
  
  #headers
  event_headers <- html_nodes(webpage, 'th')  #read in 'headers' node
  event_headers <- html_text(event_headers)  #extract
  event_headers <- data.frame(matrix(unlist(event_headers), nrow = 1), stringsAsFactors = FALSE)  #convert to df
  
  names(event_headers) <- event_headers[1,]  #set row 1 as column names
  colnames(event_headers)[1] <- "name"  #rename first column to team/athlete name
  columns <- ncol(event_headers)  #save number of columns
  
  #names
  event_names <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView1 td:nth-child(1)')
  event_names <- html_text(event_names)
  event_names <- as.data.frame(event_names)
  
  event_names[,1] <- gsub("\\(.*","", event_names[,1])  #remove country abbreviations and parenthesis from name col
  event_names[,1] <- sub("\\s+$", "", event_names[,1])  #remove trailing white space
  
  #odds hi lo
  event_hilo <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView1 td+ td')
  event_hilo <- html_text(event_hilo)
  event_hilo <- data.frame(matrix(as.numeric(unlist(event_hilo)), ncol = hilo_cols, byrow = TRUE))
  
  #odds sites
  event_odds <- html_nodes(webpage, '#mainplh_boAutoOddsTable1_GridView2 td')
  event_odds <- html_text(event_odds)
  event_odds <- data.frame(matrix(as.numeric(unlist(event_odds)), ncol = columns - 3, byrow = TRUE))
  
  #bind columns
  event_df <- event_names %>%
    bind_cols(event_hilo) %>%
    bind_cols(event_odds) %>%
    head(-1)
  
  #will need to do something with duplicate names similar to what I did with baseball
  
  #name cols
  names(event_df) <- names(event_headers)  #convert to headers df names
  
  #add event col
  event_df$event <- event
  
  #add ifelse() for event that there are no odds posted
  
  #return event df
  event_df
}

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-mens-slalom',
                  'http://www.nicerodds.co.uk/olympics-mens-giant-slalom',
                  'http://www.nicerodds.co.uk/olympics-mens-downhill',
                  'http://www.nicerodds.co.uk/olympics-mens-combined',
                  'http://www.nicerodds.co.uk/olympics-mens-super-g',
                  'http://www.nicerodds.co.uk/olympics-alpine-team-event',
                  'http://www.nicerodds.co.uk/olympics-womens-slalom',
                  'http://www.nicerodds.co.uk/olympics-womens-giant-slalom',
                  'http://www.nicerodds.co.uk/olympics-womens-downhill',
                  'http://www.nicerodds.co.uk/olympics-womens-combined',
                  'http://www.nicerodds.co.uk/olympics-womens-super-g')
)

alpine <- lapply(urls, nicerodds_scraper)
alpine <- do.call(bind_rows, alpine)
alpine$sport <- "alpine"

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-biathlon-men-10-km-sprint',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-12-5-km-pursuit',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-15-km-mass-start',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-20-km-individual',
                  'http://www.nicerodds.co.uk/olympics-biathlon-men-relay',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-7-5-km-sprint',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-10-km-pursuit',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-12-5-km-mass-start',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-15-km-individual',
                  'http://www.nicerodds.co.uk/olympics-biathlon-women-relay',
                  'http://www.nicerodds.co.uk/olympics-biathlon-mixed-relay')
)

biathlon <- lapply(urls, nicerodds_scraper)
biathlon <- do.call(bind_rows, biathlon)
biathlon$sport <- "biathlon"

urls <- as.list(c('http://www.nicerodds.co.uk/olympics-cross-country-mens-15-km-freestyle',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-skiathlon',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-50-km',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-4x10-mix-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-sprint-classic',
                  'http://www.nicerodds.co.uk/olympics-cross-country-mens-sprint-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-10-km-freestyle',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-skiathlon',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-30-km-classical',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-4x5-mix-relay',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-sprint-relay-skate',
                  'http://www.nicerodds.co.uk/olympics-cross-country-womens-sprint-classic')
)

cross_country <- lapply(urls, nicerodds_scraper)
cross_country <- do.call(bind_rows, cross_country)
cross_country$sport <- "cross_country"

#hockey
urls <- as.list(c('http://www.nicerodds.co.uk/olympics-ice-hockey-men'),
                'http://www.nicerodds.co.uk/olympics-ice-hockey-women')

hockey <- lapply(urls, nicerodds_scraper)
hockey <- do.call(bind_rows, hockey)
hockey$sport <- "hockey"

#ski jumping
urls <- as.list(c('http://www.nicerodds.co.uk/olympics-ski-jumping-mens-normal-hill'),
                'http://www.nicerodds.co.uk/olympics-ski-jumping-mens-large-hill',
                'http://www.nicerodds.co.uk/olympics-ski-jumping-mens-large-hill-team',
                'http://www.nicerodds.co.uk/olympics-ski-jumping-womens-normal-hill')

ski_jumping <- lapply(urls, nicerodds_scraper)
ski_jumping <- do.call(bind_rows, ski_jumping)
ski_jumping$sport <- "ski_jumping"

all_events <- alpine %>%
  bind_rows(biathlon) %>%
  bind_rows(cross_country) %>%
  bind_rows(hockey) %>%
  bind_rows(ski_jumping)

#Paf and Unibet and the same, so get rid of Paf
all_events$Unibet <- NULL

#remove "Any Other" from $name
all_events <- all_events %>%
  filter(!grepl("Any Other", name))

#Look for other duplicate cols

#to do:
#1) combine by same name in same event
#2) get rid of non-American symbols
#3) get rid of names that are "Any other athlete" and the like
all_events_odds <- all_events %>%
  select(-name, -Highestodds, -Lowestodds, -event, -sport)

all_events_odds$mean_odds <- rowMeans(all_events_odds, na.rm = TRUE)

all_events_odds <- all_events_odds %>%
  select(mean_odds)
all_events <- bind_cols(all_events, all_events_odds)
rm(all_events_odds)
#
all_events1 <- all_events %>%
  select(name, sport, event, mean_odds) %>%
  filter(!is.na(mean_odds)) %>%
  mutate(implied_odds = 1 / mean_odds)
#
all_events2 <- all_events1 %>%
  group_by(sport, event) %>%
  summarize(event_odds_tot = sum(implied_odds))
all_events1 <- all_events1 %>%
  left_join(all_events2, by = c("sport", "event")) %>%
  mutate(true_odds = implied_odds / event_odds_tot)
# #checks to make sure true odds add to 1 for each event
all_events_new <- all_events1 %>%
  group_by(sport, event) %>%
  summarize(event_true_odds_tot = sum(true_odds))

#rm(all_events2)
#
#find odds of second place

#####
odds_second <- function(x) {
  
  List <- list()
  for(i in 1:length(x)) {
    
    new_odds <- -1 * (x[i] / (1 - x[i])) * x[i]
    
    for(j in 1:length(x)) {
      
      new_odds <- new_odds + (x[i] / (1 - x[j])) * x[j]
    }
    List[[i]] <- new_odds
    #print(new_odds)
    #print(List[[i]])
    #return(new_odds[i])
  }
  Matrix <- t(do.call(cbind, List))
  #print(Matrix)
}

slalom <- all_events1 %>% filter(event == "Slalom men")
#odds_second(slalom$true_odds)
#slalom$true_odds_second <- odds_second(slalom$true_odds)
true_odds_sec <- odds_second(slalom$true_odds)
# #new_df <- cbind(slalom, true_odds_sec)
slalom <- cbind(slalom, true_odds_sec)
# #

#create a list of data frames by event
# df[1] <- all_events1 %>% 
#   filter(levels(factor(event))[1])

n_events <- levels(factor(all_events1$event))

df <- as.data.frame()
for(i in seq_along(n_events)) {
  #df[i] <- filter(all_events1, event == n_events[i])
  df[i] <- all_events1 %>%
    filter(event == n_events[i])
  #print(df[i])
  #df[i]
  df[i]
}

#####
all_events1 %>% group_by(event) %>% summarise(odds_second(true_odds))
all_events1 %>% group_by(event) %>% summarise_each(odds_second(true_odds))
#
all_events2 <- all_events1 %>%
  group_by(event) %>%
  summarize(true_odds_second = odds_second(true_odds))

all_events2 <- all_events1 %>%
  group_by(event) %>%
  summarize(true_odds_second = mean(true_odds))

all_events2 <- all_events1 %>%
  group_by(event)
lapply(group_by(all_events1$true_odds, event), mean)
